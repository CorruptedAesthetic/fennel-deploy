name: GitOps CD - Polkadot SDK

on:
  push:
    branches: [main]
    paths:
      - 'charts/**'
      - 'fennel-solonet/**'
      - 'Dockerfile'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches: [main]
    paths:
      - 'charts/**'
      - 'fennel-solonet/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/fennel-node

jobs:
  # Lint and validate Helm charts
  helm-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'
          
      - name: Lint Helm charts
        run: |
          for chart in charts/*/; do
            echo "Linting $chart"
            helm lint "$chart"
          done
          
      - name: Template Helm charts
        run: |
          for chart in charts/*/; do
            echo "Templating $chart"
            helm template test "$chart" --debug
          done

  # Validate Kubernetes manifests
  k8s-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Validate K8s manifests
        run: |
          chmod +x ./validate-k8s-manifests.sh
          ./validate-k8s-manifests.sh

  # Build with srtool for reproducible builds
  srtool-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build with srtool
        uses: chevdor/srtool-actions@v0.9.2
        id: srtool_build
        with:
          chain: fennel-solonet
          runtime_dir: runtime
          
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json
          
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Integration test with Kind
  integration-test:
    runs-on: ubuntu-latest
    needs: [helm-lint, k8s-validate]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Create Kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: fennel-test
          
      - name: Set up Helm
        uses: azure/setup-helm@v3
        
      - name: Install Flux
        run: |
          curl -s https://fluxcd.io/install.sh | sudo bash
          flux install --components-extra=image-reflector-controller,image-automation-controller
          
      - name: Test Helm chart deployment
        run: |
          helm install fennel-test ./charts/fennel-solonet \
            --set image.tag=latest \
            --set bootnode.enabled=true \
            --set validator.enabled=false \
            --wait --timeout=300s
            
      - name: Verify deployment
        run: |
          kubectl get pods -l app.kubernetes.io/name=fennel-solonet
          kubectl logs -l app.kubernetes.io/name=fennel-solonet --tail=50

  # Update image digest in infra-gitops
  update-gitops:
    runs-on: ubuntu-latest
    needs: [srtool-build, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout infra-gitops
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/infra-gitops
          token: ${{ secrets.GITOPS_TOKEN }}
          path: infra-gitops
          
      - name: Update image digest
        run: |
          cd infra-gitops
          
          # Extract digest from the built image
          DIGEST="${{ needs.srtool-build.outputs.image-digest }}"
          
          # Update values-dev.yaml with new digest
          yq eval '.image.tag = "${{ github.sha }}"' -i overlays/dev/fennel-solonet/values-dev.yaml
          yq eval '.image.digest = "'$DIGEST'"' -i overlays/dev/fennel-solonet/values-dev.yaml
          
          # Commit and push changes
          git config user.name "GitOps Bot"
          git config user.email "gitops-bot@fennel.xyz"
          git add .
          git commit -m "Update fennel-node image to ${{ github.sha }}

          Built from: ${{ github.repository }}@${{ github.sha }}
          Image: ${{ needs.srtool-build.outputs.image-tag }}
          Digest: $DIGEST"
          git push

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [srtool-build]
    if: github.event_name == 'push'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif' 