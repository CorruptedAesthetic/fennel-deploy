#!/bin/bash

# 🎯 PHASE 1: INVENTORY & FREEZE - Following PROGRESSGUIDE.txt
# ================================================================
# This script implements Step 1 of the PROGRESSGUIDE transformation:
# 1. Tag the present state for safety rollback
# 2. Generate inventory of all infrastructure files to be moved

set -euo pipefail

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')]${NC} $1"
}

log_info() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')] ℹ️${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[$(date '+%H:%M:%S')] ⚠️${NC} $1"
}

echo ""
echo -e "${CYAN}🎯 PHASE 1: INVENTORY & FREEZE${NC}"
echo -e "${CYAN}===============================${NC}"
echo "Following PROGRESSGUIDE.txt Step 1: Tag current state and inventory files"
echo ""

# 1. Tag the present state for safety
log "Creating safety backup tag..."
git tag -a "backup/pre-gitops-split" -m "Safety backup before GitOps repository split

This tag preserves the current monolithic structure before implementing
the PROGRESSGUIDE.txt transformation to separate fennel-deploy (source)
from infra-gitops (infrastructure configuration).

Created: $(date)
Script: inventory-and-freeze.sh"

if git push origin "backup/pre-gitops-split" 2>/dev/null; then
    log "✅ Safety tag pushed to remote"
else
    log_warn "Remote push failed - tag created locally"
fi

# 2. Generate comprehensive inventory
log "Generating comprehensive inventory of infrastructure files..."

INVENTORY_FILE="gitops-split-inventory.txt"

cat > "$INVENTORY_FILE" << 'EOF'
# 📋 GITOPS SPLIT INVENTORY
# =========================
# Generated by inventory-and-freeze.sh following PROGRESSGUIDE.txt
# This inventory shows what files will move from fennel-deploy to infra-gitops

## CURRENT MONOLITHIC STRUCTURE ANALYSIS

### Files that WILL MOVE to infra-gitops (Infrastructure Configuration):

EOF

echo "" >> "$INVENTORY_FILE"
echo "### 🛠️ Kubernetes Manifests & Helm Values:" >> "$INVENTORY_FILE"
find . -name "*.yaml" -o -name "*.yml" | grep -E "(kubernetes|k8s|helm|values|manifest)" | sort >> "$INVENTORY_FILE"

echo "" >> "$INVENTORY_FILE"
echo "### ☸️ All YAML files (potential infrastructure):" >> "$INVENTORY_FILE"
git ls-files '*.yaml' '*.yml' | sort >> "$INVENTORY_FILE"

echo "" >> "$INVENTORY_FILE"
echo "### 🔧 Shell scripts (deployment/infrastructure):" >> "$INVENTORY_FILE"
find . -name "*.sh" | grep -E "(deploy|setup|kubernetes|k8s)" | sort >> "$INVENTORY_FILE"

echo "" >> "$INVENTORY_FILE"
echo "### 🏗️ Terraform files (if any):" >> "$INVENTORY_FILE"
git ls-files '*.tf' '*.tfvars' | sort >> "$INVENTORY_FILE"

echo "" >> "$INVENTORY_FILE"
cat >> "$INVENTORY_FILE" << 'EOF'

## FILES THAT WILL STAY in fennel-deploy (Source Code):

### 📦 Source Code & Build Files:
EOF

find . -name "Dockerfile*" -o -name "Cargo.toml" -o -name "*.rs" -o -name "package.json" | head -20 | sort >> "$INVENTORY_FILE"

echo "" >> "$INVENTORY_FILE"
echo "### 🧪 Local Development Tools:" >> "$INVENTORY_FILE"
find . -name "docker-compose*.yml" -o -name "*local*" -o -name "*dev*" | sort >> "$INVENTORY_FILE"

echo "" >> "$INVENTORY_FILE"
cat >> "$INVENTORY_FILE" << 'EOF'

## 🚨 CRITICAL FILES REQUIRING MANUAL REVIEW:

EOF

echo "### 📜 Large deployment scripts (need splitting):" >> "$INVENTORY_FILE"
find . -name "*.sh" -size +10k | sort >> "$INVENTORY_FILE"

echo "" >> "$INVENTORY_FILE"
echo "### 🔍 Mixed configuration directories:" >> "$INVENTORY_FILE"
find . -type d -name "*kubernetes*" -o -name "*k8s*" -o -name "*deploy*" | sort >> "$INVENTORY_FILE"

# 3. Analyze deploy-scenario2.sh specifically
log "Analyzing deploy-scenario2.sh for component separation..."

cat >> "$INVENTORY_FILE" << 'EOF'

## 🔍 DEPLOY-SCENARIO2.SH ANALYSIS (2054 lines)

This monolithic script contains multiple concerns that should be separated:

### Components that belong in infra-gitops:
- Kubernetes deployment logic (helm install/upgrade commands)
- Environment-specific configurations
- Infrastructure validation and health checks
- Production environment safety checks

### Components that belong in fennel-deploy CI:
- Image building and tagging
- Deterministic builds with srtool
- Integration testing with Kind
- Image digest patching automation

### Components that need dedicated tools:
- Port forwarding management (should be kubectl/helm commands)
- Session key generation (should be separate operational script)
- Monitoring and diagnostics (should be observability tooling)

### Recommended transformation:
1. Split into multiple focused scripts
2. Move infrastructure parts to infra-gitops overlays
3. Keep CI/build logic in fennel-deploy
4. Create operational runbooks for manual tasks

EOF

# 4. Generate summary statistics
log "Generating summary statistics..."

YAML_COUNT=$(git ls-files '*.yaml' '*.yml' | wc -l)
SHELL_COUNT=$(find . -name "*.sh" | wc -l)
LARGE_SCRIPTS=$(find . -name "*.sh" -size +5k | wc -l)

cat >> "$INVENTORY_FILE" << EOF

## 📊 SUMMARY STATISTICS

- Total YAML files: $YAML_COUNT
- Total shell scripts: $SHELL_COUNT
- Large scripts (>5KB): $LARGE_SCRIPTS
- Main deployment script: deploy-scenario2.sh (89KB, 2054 lines)

## 🎯 NEXT STEPS (Following PROGRESSGUIDE.txt)

1. ✅ Phase 1 Complete: Backup created and inventory generated
2. 📋 Phase 2: Create infra-gitops repository with overlays/dev structure
3. 🔄 Phase 3: Move all Kubernetes manifests from fennel-solonet/kubernetes/
4. ⚡ Phase 4: Split deploy-scenario2.sh into focused CI/operational scripts
5. 🚀 Phase 5: Wire deterministic CI with image digest promotion

EOF

log "✅ Inventory complete: $INVENTORY_FILE"

# 5. Display critical findings
echo ""
echo -e "${CYAN}📋 CRITICAL FINDINGS:${NC}"
echo ""
echo "🔍 Files that need to move to infra-gitops:"
echo "   - $(find . -path "*/kubernetes/*" -name "*.yaml" | wc -l) Kubernetes manifests"
echo "   - $(find . -name "*values*.yaml" | wc -l) Helm values files"
echo "   - $(find . -name "*network-policy*" -o -name "*pdb*" -o -name "*secret*" | wc -l) Security/policy files"
echo ""
echo "🚨 Large scripts requiring splitting:"
find . -name "*.sh" -size +10k -exec basename {} \; -exec wc -l {} \; | paste - - | while read script lines; do
    echo "   - $script: $lines"
done
echo ""
echo "📁 Next: Run './create-infra-gitops.sh' to implement Phase 2"

log "Phase 1 complete! Review $INVENTORY_FILE before proceeding." 