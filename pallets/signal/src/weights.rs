
//! Autogenerated weights for `pallet_signal`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-05-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-AH3IE72`, CPU: `AMD Ryzen 3 3100 4-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// /home/neurosx/WORKING_WORKSPACE/fennel-solonet-2503UPGRADE/target/release/wbuild/fennel-node-runtime/fennel_node_runtime.wasm
// --pallet
// pallet_signal
// --extrinsic
// 
// --template
// /home/neurosx/WORKING_WORKSPACE/fennel-solonet-2503UPGRADE/scripts/benchmarking/frame-weight-template.hbs
// --output
// /home/neurosx/WORKING_WORKSPACE/fennel-solonet-2503UPGRADE/benchmarks_output/pallet_signal_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_signal`.
pub trait WeightInfo {
	fn set_signal_parameter() -> Weight;
	fn send_rating_signal() -> Weight;
	fn update_rating_signal() -> Weight;
	fn revoke_rating_signal() -> Weight;
	fn send_signal() -> Weight;
	fn send_service_signal() -> Weight;
	fn set_signal_parameter_large_input() -> Weight;
	fn send_rating_signal_large_input() -> Weight;
	fn send_signal_large_input() -> Weight;
	fn send_service_signal_large_input() -> Weight;
}

/// Weights for `pallet_signal` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Signal::SignalParameterList` (r:0 w:1)
	/// Proof: `Signal::SignalParameterList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	fn set_signal_parameter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 14_661_000 picoseconds.
		Weight::from_parts(18_107_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Signal::RatingSignalList` (r:1 w:1)
	/// Proof: `Signal::RatingSignalList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn send_rating_signal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2029`
		//  Estimated: `4764`
		// Minimum execution time: 103_887_000 picoseconds.
		Weight::from_parts(158_219_000, 4764)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Signal::RatingSignalList` (r:1 w:1)
	/// Proof: `Signal::RatingSignalList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn update_rating_signal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2053`
		//  Estimated: `4764`
		// Minimum execution time: 100_673_000 picoseconds.
		Weight::from_parts(110_069_000, 4764)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Signal::RatingSignalList` (r:1 w:1)
	/// Proof: `Signal::RatingSignalList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn revoke_rating_signal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2053`
		//  Estimated: `4764`
		// Minimum execution time: 101_052_000 picoseconds.
		Weight::from_parts(134_235_000, 4764)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn send_signal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 16_425_000 picoseconds.
		Weight::from_parts(18_945_000, 0)
	}
	fn send_service_signal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 16_866_000 picoseconds.
		Weight::from_parts(18_900_000, 0)
	}
	/// Storage: `Signal::SignalParameterList` (r:0 w:1)
	/// Proof: `Signal::SignalParameterList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	fn set_signal_parameter_large_input() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_770_000 picoseconds.
		Weight::from_parts(14_427_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Signal::RatingSignalList` (r:1 w:1)
	/// Proof: `Signal::RatingSignalList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn send_rating_signal_large_input() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `4764`
		// Minimum execution time: 52_650_000 picoseconds.
		Weight::from_parts(57_636_000, 4764)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn send_signal_large_input() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_196_000 picoseconds.
		Weight::from_parts(11_646_000, 0)
	}
	fn send_service_signal_large_input() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_126_000 picoseconds.
		Weight::from_parts(11_817_000, 0)
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Signal::SignalParameterList` (r:0 w:1)
	/// Proof: `Signal::SignalParameterList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	fn set_signal_parameter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 14_661_000 picoseconds.
		Weight::from_parts(18_107_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Signal::RatingSignalList` (r:1 w:1)
	/// Proof: `Signal::RatingSignalList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn send_rating_signal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2029`
		//  Estimated: `4764`
		// Minimum execution time: 103_887_000 picoseconds.
		Weight::from_parts(158_219_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Signal::RatingSignalList` (r:1 w:1)
	/// Proof: `Signal::RatingSignalList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn update_rating_signal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2053`
		//  Estimated: `4764`
		// Minimum execution time: 100_673_000 picoseconds.
		Weight::from_parts(110_069_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Signal::RatingSignalList` (r:1 w:1)
	/// Proof: `Signal::RatingSignalList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn revoke_rating_signal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2053`
		//  Estimated: `4764`
		// Minimum execution time: 101_052_000 picoseconds.
		Weight::from_parts(134_235_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	fn send_signal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 16_425_000 picoseconds.
		Weight::from_parts(18_945_000, 0)
	}
	fn send_service_signal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 16_866_000 picoseconds.
		Weight::from_parts(18_900_000, 0)
	}
	/// Storage: `Signal::SignalParameterList` (r:0 w:1)
	/// Proof: `Signal::SignalParameterList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	fn set_signal_parameter_large_input() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_770_000 picoseconds.
		Weight::from_parts(14_427_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Signal::RatingSignalList` (r:1 w:1)
	/// Proof: `Signal::RatingSignalList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn send_rating_signal_large_input() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `4764`
		// Minimum execution time: 52_650_000 picoseconds.
		Weight::from_parts(57_636_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	fn send_signal_large_input() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_196_000 picoseconds.
		Weight::from_parts(11_646_000, 0)
	}
	fn send_service_signal_large_input() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_126_000 picoseconds.
		Weight::from_parts(11_817_000, 0)
	}
}
