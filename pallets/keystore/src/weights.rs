
//! Autogenerated weights for `pallet_keystore`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-05-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-AH3IE72`, CPU: `AMD Ryzen 3 3100 4-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/solochain-template-runtime/solochain_template_runtime.compact.compressed.wasm
// --pallet
// pallet_keystore
// --extrinsic
// *
// --template
// /home/neurosx/WORKING_WORKSPACE/StandaloneSolochain2503/solochain/pallets/benchmarking/frame-weight-template.hbs
// --output
// /home/neurosx/WORKING_WORKSPACE/StandaloneSolochain2503/solochain/pallets/keystore/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_keystore`.
pub trait WeightInfo {
	fn announce_key() -> Weight;
	fn revoke_key() -> Weight;
	fn issue_encryption_key() -> Weight;
}

/// Weights for `pallet_keystore` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(196), added: 2671, mode: `MaxEncodedLen`)
	fn announce_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3661`
		// Minimum execution time: 17_421_000 picoseconds.
		Weight::from_parts(21_162_000, 3661)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(196), added: 2671, mode: `MaxEncodedLen`)
	fn revoke_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `116`
		//  Estimated: `3661`
		// Minimum execution time: 19_748_000 picoseconds.
		Weight::from_parts(20_329_000, 3661)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedEncryptionKeys` (r:0 w:1)
	/// Proof: `Keystore::IssuedEncryptionKeys` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn issue_encryption_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_113_000 picoseconds.
		Weight::from_parts(12_707_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(196), added: 2671, mode: `MaxEncodedLen`)
	fn announce_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3661`
		// Minimum execution time: 17_421_000 picoseconds.
		Weight::from_parts(21_162_000, 3661)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(196), added: 2671, mode: `MaxEncodedLen`)
	fn revoke_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `116`
		//  Estimated: `3661`
		// Minimum execution time: 19_748_000 picoseconds.
		Weight::from_parts(20_329_000, 3661)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedEncryptionKeys` (r:0 w:1)
	/// Proof: `Keystore::IssuedEncryptionKeys` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn issue_encryption_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_113_000 picoseconds.
		Weight::from_parts(12_707_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
