
//! Autogenerated weights for `pallet_keystore`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-05-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-AH3IE72`, CPU: `AMD Ryzen 3 3100 4-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/fennel-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_keystore
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/keystore/src/weights.rs
// --template
// ./scripts/benchmarking/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_keystore`.
pub trait WeightInfo {
	fn announce_key() -> Weight;
	fn announce_a_whole_lotta_keys() -> Weight;
	fn announce_key_with_long_vectors() -> Weight;
	fn announce_a_bunch_of_long_keys() -> Weight;
	fn revoke_key() -> Weight;
	fn revoke_one_of_many_keys() -> Weight;
	fn issue_encryption_key() -> Weight;
	fn issue_a_ton_of_encryption_keys() -> Weight;
}

/// Weights for `pallet_keystore` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn announce_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `5581`
		// Minimum execution time: 22_852_000 picoseconds.
		Weight::from_parts(32_480_000, 5581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn announce_a_whole_lotta_keys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2084`
		//  Estimated: `5581`
		// Minimum execution time: 63_962_000 picoseconds.
		Weight::from_parts(75_428_000, 5581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn announce_key_with_long_vectors() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `5581`
		// Minimum execution time: 21_623_000 picoseconds.
		Weight::from_parts(22_436_000, 5581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn announce_a_bunch_of_long_keys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2080`
		//  Estimated: `5581`
		// Minimum execution time: 67_817_000 picoseconds.
		Weight::from_parts(84_066_000, 5581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn revoke_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `134`
		//  Estimated: `5581`
		// Minimum execution time: 17_738_000 picoseconds.
		Weight::from_parts(19_152_000, 5581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn revoke_one_of_many_keys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2112`
		//  Estimated: `5581`
		// Minimum execution time: 61_407_000 picoseconds.
		Weight::from_parts(69_051_000, 5581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedEncryptionKeys` (r:0 w:1)
	/// Proof: `Keystore::IssuedEncryptionKeys` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn issue_encryption_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_963_000 picoseconds.
		Weight::from_parts(10_548_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedEncryptionKeys` (r:0 w:1)
	/// Proof: `Keystore::IssuedEncryptionKeys` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn issue_a_ton_of_encryption_keys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 17_287_000 picoseconds.
		Weight::from_parts(18_492_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn announce_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `5581`
		// Minimum execution time: 22_852_000 picoseconds.
		Weight::from_parts(32_480_000, 5581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn announce_a_whole_lotta_keys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2084`
		//  Estimated: `5581`
		// Minimum execution time: 63_962_000 picoseconds.
		Weight::from_parts(75_428_000, 5581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn announce_key_with_long_vectors() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `5581`
		// Minimum execution time: 21_623_000 picoseconds.
		Weight::from_parts(22_436_000, 5581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn announce_a_bunch_of_long_keys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2080`
		//  Estimated: `5581`
		// Minimum execution time: 67_817_000 picoseconds.
		Weight::from_parts(84_066_000, 5581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn revoke_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `134`
		//  Estimated: `5581`
		// Minimum execution time: 17_738_000 picoseconds.
		Weight::from_parts(19_152_000, 5581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedKeys` (r:1 w:1)
	/// Proof: `Keystore::IssuedKeys` (`max_values`: None, `max_size`: Some(2116), added: 4591, mode: `MaxEncodedLen`)
	fn revoke_one_of_many_keys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2112`
		//  Estimated: `5581`
		// Minimum execution time: 61_407_000 picoseconds.
		Weight::from_parts(69_051_000, 5581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedEncryptionKeys` (r:0 w:1)
	/// Proof: `Keystore::IssuedEncryptionKeys` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn issue_encryption_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_963_000 picoseconds.
		Weight::from_parts(10_548_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Keystore::IssuedEncryptionKeys` (r:0 w:1)
	/// Proof: `Keystore::IssuedEncryptionKeys` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn issue_a_ton_of_encryption_keys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 17_287_000 picoseconds.
		Weight::from_parts(18_492_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
