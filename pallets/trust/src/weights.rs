
//! Autogenerated weights for `pallet_trust`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-05-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-AH3IE72`, CPU: `AMD Ryzen 3 3100 4-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// /home/neurosx/WORKING_WORKSPACE/fennel-solonet-2503UPGRADE/target/release/wbuild/fennel-node-runtime/fennel_node_runtime.wasm
// --pallet
// pallet_trust
// --extrinsic
// 
// --template
// /home/neurosx/WORKING_WORKSPACE/fennel-solonet-2503UPGRADE/scripts/benchmarking/frame-weight-template.hbs
// --output
// /home/neurosx/WORKING_WORKSPACE/fennel-solonet-2503UPGRADE/benchmarks_output/pallet_trust_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_trust`.
pub trait WeightInfo {
	fn set_trust_parameter() -> Weight;
	fn issue_trust() -> Weight;
	fn issue_trust_repeatedly(m: u32, ) -> Weight;
	fn revoke_trust() -> Weight;
	fn revoke_trust_from_heavy_storage(m: u32, ) -> Weight;
	fn remove_trust() -> Weight;
	fn remove_trust_from_heavy_storage(m: u32, ) -> Weight;
	fn request_trust() -> Weight;
	fn request_trust_repeatedly(m: u32, ) -> Weight;
	fn remove_revoked_trust() -> Weight;
	fn remove_revoked_trust_heavy_storage(m: u32, ) -> Weight;
	fn cancel_trust_request() -> Weight;
	fn cancel_trust_request_heavy_storage(m: u32, ) -> Weight;
}

/// Weights for `pallet_trust` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Trust::TrustParameterList` (r:0 w:1)
	/// Proof: `Trust::TrustParameterList` (`max_values`: None, `max_size`: Some(131), added: 2606, mode: `MaxEncodedLen`)
	fn set_trust_parameter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_034_000 picoseconds.
		Weight::from_parts(19_134_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Trust::TrustIssuance` (r:1 w:1)
	/// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentIssued` (r:1 w:1)
	/// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn issue_trust() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3565`
		// Minimum execution time: 16_056_000 picoseconds.
		Weight::from_parts(19_368_000, 3565)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustIssuance` (r:1 w:1)
	/// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentIssued` (r:1 w:1)
	/// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 1000]`.
	fn issue_trust_repeatedly(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `932`
		//  Estimated: `3565`
		// Minimum execution time: 16_200_000 picoseconds.
		Weight::from_parts(27_527_746, 3565)
			// Standard Error: 921
			.saturating_add(Weight::from_parts(26_265, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRevocation` (r:1 w:1)
	/// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	/// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn revoke_trust() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3565`
		// Minimum execution time: 17_334_000 picoseconds.
		Weight::from_parts(23_328_000, 3565)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRevocation` (r:1 w:1)
	/// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	/// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 100000]`.
	fn revoke_trust_from_heavy_storage(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1825`
		//  Estimated: `3565`
		// Minimum execution time: 16_632_000 picoseconds.
		Weight::from_parts(20_151_782, 3565)
			// Standard Error: 145
			.saturating_add(Weight::from_parts(1_920, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustIssuance` (r:1 w:1)
	/// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentIssued` (r:1 w:1)
	/// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_trust() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `157`
		//  Estimated: `3565`
		// Minimum execution time: 21_375_000 picoseconds.
		Weight::from_parts(25_182_000, 3565)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustIssuance` (r:1 w:1)
	/// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentIssued` (r:1 w:1)
	/// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 1000]`.
	fn remove_trust_from_heavy_storage(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1037`
		//  Estimated: `3565`
		// Minimum execution time: 19_467_000 picoseconds.
		Weight::from_parts(31_319_851, 3565)
			// Standard Error: 1_093
			.saturating_add(Weight::from_parts(27_504, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRequestList` (r:1 w:1)
	/// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRequests` (r:1 w:1)
	/// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn request_trust() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3565`
		// Minimum execution time: 16_524_000 picoseconds.
		Weight::from_parts(25_938_000, 3565)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRequestList` (r:1 w:1)
	/// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRequests` (r:1 w:1)
	/// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 1000]`.
	fn request_trust_repeatedly(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `930`
		//  Estimated: `3565`
		// Minimum execution time: 15_993_000 picoseconds.
		Weight::from_parts(29_372_830, 3565)
			// Standard Error: 886
			.saturating_add(Weight::from_parts(23_364, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRevocation` (r:1 w:1)
	/// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	/// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_revoked_trust() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `157`
		//  Estimated: `3565`
		// Minimum execution time: 20_376_000 picoseconds.
		Weight::from_parts(29_628_000, 3565)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRevocation` (r:1 w:1)
	/// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	/// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 1000]`.
	fn remove_revoked_trust_heavy_storage(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1037`
		//  Estimated: `3565`
		// Minimum execution time: 20_412_000 picoseconds.
		Weight::from_parts(31_845_618, 3565)
			// Standard Error: 941
			.saturating_add(Weight::from_parts(27_025, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRequestList` (r:1 w:1)
	/// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRequests` (r:1 w:1)
	/// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn cancel_trust_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `155`
		//  Estimated: `3565`
		// Minimum execution time: 19_395_000 picoseconds.
		Weight::from_parts(30_005_000, 3565)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRequestList` (r:1 w:1)
	/// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRequests` (r:1 w:1)
	/// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 1000]`.
	fn cancel_trust_request_heavy_storage(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1017`
		//  Estimated: `3565`
		// Minimum execution time: 19_773_000 picoseconds.
		Weight::from_parts(29_670_714, 3565)
			// Standard Error: 947
			.saturating_add(Weight::from_parts(26_075, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Trust::TrustParameterList` (r:0 w:1)
	/// Proof: `Trust::TrustParameterList` (`max_values`: None, `max_size`: Some(131), added: 2606, mode: `MaxEncodedLen`)
	fn set_trust_parameter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_034_000 picoseconds.
		Weight::from_parts(19_134_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Trust::TrustIssuance` (r:1 w:1)
	/// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentIssued` (r:1 w:1)
	/// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn issue_trust() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3565`
		// Minimum execution time: 16_056_000 picoseconds.
		Weight::from_parts(19_368_000, 3565)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustIssuance` (r:1 w:1)
	/// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentIssued` (r:1 w:1)
	/// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 1000]`.
	fn issue_trust_repeatedly(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `932`
		//  Estimated: `3565`
		// Minimum execution time: 16_200_000 picoseconds.
		Weight::from_parts(27_527_746, 3565)
			// Standard Error: 921
			.saturating_add(Weight::from_parts(26_265, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRevocation` (r:1 w:1)
	/// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	/// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn revoke_trust() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3565`
		// Minimum execution time: 17_334_000 picoseconds.
		Weight::from_parts(23_328_000, 3565)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRevocation` (r:1 w:1)
	/// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	/// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 100000]`.
	fn revoke_trust_from_heavy_storage(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1825`
		//  Estimated: `3565`
		// Minimum execution time: 16_632_000 picoseconds.
		Weight::from_parts(20_151_782, 3565)
			// Standard Error: 145
			.saturating_add(Weight::from_parts(1_920, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustIssuance` (r:1 w:1)
	/// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentIssued` (r:1 w:1)
	/// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_trust() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `157`
		//  Estimated: `3565`
		// Minimum execution time: 21_375_000 picoseconds.
		Weight::from_parts(25_182_000, 3565)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustIssuance` (r:1 w:1)
	/// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentIssued` (r:1 w:1)
	/// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 1000]`.
	fn remove_trust_from_heavy_storage(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1037`
		//  Estimated: `3565`
		// Minimum execution time: 19_467_000 picoseconds.
		Weight::from_parts(31_319_851, 3565)
			// Standard Error: 1_093
			.saturating_add(Weight::from_parts(27_504, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRequestList` (r:1 w:1)
	/// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRequests` (r:1 w:1)
	/// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn request_trust() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3565`
		// Minimum execution time: 16_524_000 picoseconds.
		Weight::from_parts(25_938_000, 3565)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRequestList` (r:1 w:1)
	/// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRequests` (r:1 w:1)
	/// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 1000]`.
	fn request_trust_repeatedly(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `930`
		//  Estimated: `3565`
		// Minimum execution time: 15_993_000 picoseconds.
		Weight::from_parts(29_372_830, 3565)
			// Standard Error: 886
			.saturating_add(Weight::from_parts(23_364, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRevocation` (r:1 w:1)
	/// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	/// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_revoked_trust() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `157`
		//  Estimated: `3565`
		// Minimum execution time: 20_376_000 picoseconds.
		Weight::from_parts(29_628_000, 3565)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRevocation` (r:1 w:1)
	/// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	/// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 1000]`.
	fn remove_revoked_trust_heavy_storage(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1037`
		//  Estimated: `3565`
		// Minimum execution time: 20_412_000 picoseconds.
		Weight::from_parts(31_845_618, 3565)
			// Standard Error: 941
			.saturating_add(Weight::from_parts(27_025, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRequestList` (r:1 w:1)
	/// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRequests` (r:1 w:1)
	/// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn cancel_trust_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `155`
		//  Estimated: `3565`
		// Minimum execution time: 19_395_000 picoseconds.
		Weight::from_parts(30_005_000, 3565)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::TrustRequestList` (r:1 w:1)
	/// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `Trust::CurrentRequests` (r:1 w:1)
	/// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 1000]`.
	fn cancel_trust_request_heavy_storage(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1017`
		//  Estimated: `3565`
		// Minimum execution time: 19_773_000 picoseconds.
		Weight::from_parts(29_670_714, 3565)
			// Standard Error: 947
			.saturating_add(Weight::from_parts(26_075, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
